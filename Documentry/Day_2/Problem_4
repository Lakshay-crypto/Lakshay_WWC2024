#include <iostream>
#include <memory>
#include <queue>
#include <thread>
#include <chrono>

struct Task {
    int taskID;
    int priority;  // Higher value means higher priority
    int executionTime;  // Time required to complete the task (in milliseconds)
    bool isPeriodic;  // Whether the task is periodic
    int period;  // Period for periodic tasks
    Task* next;  // Pointer to the next task in the list

    Task(int id, int prio, int execTime, bool periodic = false, int period = 0)
        : taskID(id), priority(prio), executionTime(execTime),
          isPeriodic(periodic), period(period), next(nullptr) {}
};
class TaskScheduler {
private:
    Task* head;  // Head of the linked list (can be circular if needed)

public:
    TaskScheduler() : head(nullptr) {}

    // Insert a task in priority order (higher priority first)
    void insertTask(int id, int priority, int executionTime, bool isPeriodic = false, int period = 0) {
        Task* newTask = new Task(id, priority, executionTime, isPeriodic, period);
        
        if (!head || head->priority < priority) {
            newTask->next = head;
            head = newTask;
        } else {
            Task* current = head;
            while (current->next && current->next->priority >= priority) {
                current = current->next;
            }
            newTask->next = current->next;
            current->next = newTask;
        }

        std::cout << "Task " << id << " added with priority " << priority << std::endl;
    }

    // Remove a task from the list (completed task)
    void removeTask(int id) {
        if (!head) {
            std::cout << "Task list is empty.\n";
            return;
        }

        // Special case: head node needs to be removed
        if (head->taskID == id) {
            Task* temp = head;
            head = head->next;
            delete temp;
            std::cout << "Task " << id << " completed and removed.\n";
            return;
        }

        // Find the task and remove it
        Task* current = head;
        while (current->next && current->next->taskID != id) {
            current = current->next;
        }

        if (current->next) {
            Task* temp = current->next;
            current->next = current->next->next;
            delete temp;
            std::cout << "Task " << id << " completed and removed.\n";
        } else {
            std::cout << "Task " << id << " not found.\n";
        }
    }

    // Display the current tasks in the list
    void display() {
        if (!head) {
            std::cout << "No tasks in the scheduler.\n";
            return;
        }

        Task* current = head;
        while (current) {
            std::cout << "Task ID: " << current->taskID << ", Priority: " << current->priority 
                      << ", Execution Time: " << current->executionTime << "ms\n";
            current = current->next;
        }
        std::cout << std::endl;
    }

    // Simulate running tasks (you can adjust the sleep time to simulate task execution)
    void run() {
        while (head) {
            Task* current = head;
            std::cout << "Executing Task " << current->taskID << "...\n";
            std::this_thread::sleep_for(std::chrono::milliseconds(current->executionTime));
            removeTask(current->taskID);  // Complete the task after execution

            // Reinsert periodic tasks
            if (current->isPeriodic) {
                std::cout << "Re-inserting periodic task " << current->taskID << " after " << current->period << " ms\n";
                insertTask(current->taskID, current->priority, current->executionTime, true, current->period);
            }
        }
    }

    // Destructor to clean up any remaining tasks
    ~TaskScheduler() {
        while (head) {
            Task* temp = head;
            head = head->next;
            delete temp;
        }
    }
};
int main() {
    TaskScheduler scheduler;

    // Adding tasks
    scheduler.insertTask(1, 3, 200);  // Task 1 with priority 3 and execution time 200ms
    scheduler.insertTask(2, 2, 100);  // Task 2 with priority 2 and execution time 100ms
    scheduler.insertTask(3, 5, 300);  // Task 3 with priority 5 and execution time 300ms
    scheduler.insertTask(4, 1, 150);  // Task 4 with priority 1 and execution time 150ms
    scheduler.insertTask(5, 3, 250, true, 500);  // Task 5 with priority 3, execution time 250ms, periodic every 500ms

    // Display the tasks
    scheduler.display();

    // Start running the tasks (simulating execution)
    scheduler.run();

    // Adding more tasks while the scheduler is running
    scheduler.insertTask(6, 4, 50);  // Task 6 with priority 4 and execution time 50ms
    scheduler.display();  // Show updated task list

    // Simulate another round of task execution
    scheduler.run();

    return 0;
}
